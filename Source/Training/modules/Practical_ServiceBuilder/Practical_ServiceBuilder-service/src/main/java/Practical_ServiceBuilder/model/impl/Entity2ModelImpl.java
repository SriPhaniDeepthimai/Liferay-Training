/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package Practical_ServiceBuilder.model.impl;

import Practical_ServiceBuilder.model.Entity2;
import Practical_ServiceBuilder.model.Entity2Model;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Entity2 service. Represents a row in the &quot;Entity1_Entity2&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>Entity2Model</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Entity2Impl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Entity2Impl
 * @generated
 */
public class Entity2ModelImpl
	extends BaseModelImpl<Entity2> implements Entity2Model {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a entity2 model instance should use the <code>Entity2</code> interface instead.
	 */
	public static final String TABLE_NAME = "Entity1_Entity2";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"StudentId", Types.INTEGER},
		{"Student_Name", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("StudentId", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("Student_Name", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Entity1_Entity2 (uuid_ VARCHAR(75) null,StudentId INTEGER not null primary key,Student_Name VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Entity1_Entity2";

	public static final String ORDER_BY_JPQL =
		" ORDER BY entity2.StudentId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Entity1_Entity2.StudentId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STUDENTID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public Entity2ModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _StudentId;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setStudentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _StudentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Entity2.class;
	}

	@Override
	public String getModelClassName() {
		return Entity2.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Entity2, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Entity2, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Entity2, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Entity2)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Entity2, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Entity2, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Entity2)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Entity2, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Entity2, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Entity2, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Entity2, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Entity2, Object>>();

			attributeGetterFunctions.put("uuid", Entity2::getUuid);
			attributeGetterFunctions.put("StudentId", Entity2::getStudentId);
			attributeGetterFunctions.put(
				"Student_Name", Entity2::getStudent_Name);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Entity2, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Entity2, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Entity2, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Entity2, String>)Entity2::setUuid);
			attributeSetterBiConsumers.put(
				"StudentId",
				(BiConsumer<Entity2, Integer>)Entity2::setStudentId);
			attributeSetterBiConsumers.put(
				"Student_Name",
				(BiConsumer<Entity2, String>)Entity2::setStudent_Name);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public int getStudentId() {
		return _StudentId;
	}

	@Override
	public void setStudentId(int StudentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_StudentId = StudentId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStudentId() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("StudentId"));
	}

	@Override
	public String getStudent_Name() {
		if (_Student_Name == null) {
			return "";
		}
		else {
			return _Student_Name;
		}
	}

	@Override
	public void setStudent_Name(String Student_Name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Student_Name = Student_Name;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Entity2 toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Entity2>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Entity2Impl entity2Impl = new Entity2Impl();

		entity2Impl.setUuid(getUuid());
		entity2Impl.setStudentId(getStudentId());
		entity2Impl.setStudent_Name(getStudent_Name());

		entity2Impl.resetOriginalValues();

		return entity2Impl;
	}

	@Override
	public Entity2 cloneWithOriginalValues() {
		Entity2Impl entity2Impl = new Entity2Impl();

		entity2Impl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		entity2Impl.setStudentId(
			this.<Integer>getColumnOriginalValue("StudentId"));
		entity2Impl.setStudent_Name(
			this.<String>getColumnOriginalValue("Student_Name"));

		return entity2Impl;
	}

	@Override
	public int compareTo(Entity2 entity2) {
		int value = 0;

		if (getStudentId() < entity2.getStudentId()) {
			value = -1;
		}
		else if (getStudentId() > entity2.getStudentId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Entity2)) {
			return false;
		}

		Entity2 entity2 = (Entity2)object;

		int primaryKey = entity2.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Entity2> toCacheModel() {
		Entity2CacheModel entity2CacheModel = new Entity2CacheModel();

		entity2CacheModel.uuid = getUuid();

		String uuid = entity2CacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			entity2CacheModel.uuid = null;
		}

		entity2CacheModel.StudentId = getStudentId();

		entity2CacheModel.Student_Name = getStudent_Name();

		String Student_Name = entity2CacheModel.Student_Name;

		if ((Student_Name != null) && (Student_Name.length() == 0)) {
			entity2CacheModel.Student_Name = null;
		}

		return entity2CacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Entity2, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Entity2, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Entity2, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Entity2)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Entity2>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Entity2.class, ModelWrapper.class);

	}

	private String _uuid;
	private int _StudentId;
	private String _Student_Name;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Entity2, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Entity2)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("StudentId", _StudentId);
		_columnOriginalValues.put("Student_Name", _Student_Name);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("StudentId", 2L);

		columnBitmasks.put("Student_Name", 4L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Entity2 _escapedModel;

}