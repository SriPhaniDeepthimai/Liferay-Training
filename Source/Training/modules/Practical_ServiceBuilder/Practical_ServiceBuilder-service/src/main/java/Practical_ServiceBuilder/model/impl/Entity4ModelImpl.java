/**
 * SPDX-FileCopyrightText: (c) 2025 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package Practical_ServiceBuilder.model.impl;

import Practical_ServiceBuilder.model.Entity4;
import Practical_ServiceBuilder.model.Entity4Model;

import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Entity4 service. Represents a row in the &quot;Entity1_Entity4&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>Entity4Model</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Entity4Impl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Entity4Impl
 * @generated
 */
public class Entity4ModelImpl
	extends BaseModelImpl<Entity4> implements Entity4Model {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a entity4 model instance should use the <code>Entity4</code> interface instead.
	 */
	public static final String TABLE_NAME = "Entity1_Entity4";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"Department_Id", Types.INTEGER},
		{"Department_Name", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Department_Id", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("Department_Name", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table Entity1_Entity4 (uuid_ VARCHAR(75) null,Department_Id INTEGER not null primary key,Department_Name VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table Entity1_Entity4";

	public static final String ORDER_BY_JPQL =
		" ORDER BY entity4.Department_Id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY Entity1_Entity4.Department_Id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DEPARTMENT_ID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public Entity4ModelImpl() {
	}

	@Override
	public int getPrimaryKey() {
		return _Department_Id;
	}

	@Override
	public void setPrimaryKey(int primaryKey) {
		setDepartment_Id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Department_Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Entity4.class;
	}

	@Override
	public String getModelClassName() {
		return Entity4.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Entity4, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Entity4, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Entity4, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Entity4)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Entity4, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Entity4, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Entity4)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Entity4, Object>>
		getAttributeGetterFunctions() {

		return AttributeGetterFunctionsHolder._attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Entity4, Object>>
		getAttributeSetterBiConsumers() {

		return AttributeSetterBiConsumersHolder._attributeSetterBiConsumers;
	}

	private static class AttributeGetterFunctionsHolder {

		private static final Map<String, Function<Entity4, Object>>
			_attributeGetterFunctions;

		static {
			Map<String, Function<Entity4, Object>> attributeGetterFunctions =
				new LinkedHashMap<String, Function<Entity4, Object>>();

			attributeGetterFunctions.put("uuid", Entity4::getUuid);
			attributeGetterFunctions.put(
				"Department_Id", Entity4::getDepartment_Id);
			attributeGetterFunctions.put(
				"Department_Name", Entity4::getDepartment_Name);

			_attributeGetterFunctions = Collections.unmodifiableMap(
				attributeGetterFunctions);
		}

	}

	private static class AttributeSetterBiConsumersHolder {

		private static final Map<String, BiConsumer<Entity4, Object>>
			_attributeSetterBiConsumers;

		static {
			Map<String, BiConsumer<Entity4, ?>> attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<Entity4, ?>>();

			attributeSetterBiConsumers.put(
				"uuid", (BiConsumer<Entity4, String>)Entity4::setUuid);
			attributeSetterBiConsumers.put(
				"Department_Id",
				(BiConsumer<Entity4, Integer>)Entity4::setDepartment_Id);
			attributeSetterBiConsumers.put(
				"Department_Name",
				(BiConsumer<Entity4, String>)Entity4::setDepartment_Name);

			_attributeSetterBiConsumers = Collections.unmodifiableMap(
				(Map)attributeSetterBiConsumers);
		}

	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public int getDepartment_Id() {
		return _Department_Id;
	}

	@Override
	public void setDepartment_Id(int Department_Id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Department_Id = Department_Id;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalDepartment_Id() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("Department_Id"));
	}

	@Override
	public String getDepartment_Name() {
		if (_Department_Name == null) {
			return "";
		}
		else {
			return _Department_Name;
		}
	}

	@Override
	public void setDepartment_Name(String Department_Name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_Department_Name = Department_Name;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public Entity4 toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Entity4>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Entity4Impl entity4Impl = new Entity4Impl();

		entity4Impl.setUuid(getUuid());
		entity4Impl.setDepartment_Id(getDepartment_Id());
		entity4Impl.setDepartment_Name(getDepartment_Name());

		entity4Impl.resetOriginalValues();

		return entity4Impl;
	}

	@Override
	public Entity4 cloneWithOriginalValues() {
		Entity4Impl entity4Impl = new Entity4Impl();

		entity4Impl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		entity4Impl.setDepartment_Id(
			this.<Integer>getColumnOriginalValue("Department_Id"));
		entity4Impl.setDepartment_Name(
			this.<String>getColumnOriginalValue("Department_Name"));

		return entity4Impl;
	}

	@Override
	public int compareTo(Entity4 entity4) {
		int value = 0;

		if (getDepartment_Id() < entity4.getDepartment_Id()) {
			value = -1;
		}
		else if (getDepartment_Id() > entity4.getDepartment_Id()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Entity4)) {
			return false;
		}

		Entity4 entity4 = (Entity4)object;

		int primaryKey = entity4.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Entity4> toCacheModel() {
		Entity4CacheModel entity4CacheModel = new Entity4CacheModel();

		entity4CacheModel.uuid = getUuid();

		String uuid = entity4CacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			entity4CacheModel.uuid = null;
		}

		entity4CacheModel.Department_Id = getDepartment_Id();

		entity4CacheModel.Department_Name = getDepartment_Name();

		String Department_Name = entity4CacheModel.Department_Name;

		if ((Department_Name != null) && (Department_Name.length() == 0)) {
			entity4CacheModel.Department_Name = null;
		}

		return entity4CacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Entity4, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Entity4, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Entity4, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Entity4)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Entity4>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Entity4.class, ModelWrapper.class);

	}

	private String _uuid;
	private int _Department_Id;
	private String _Department_Name;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Entity4, Object> function =
			AttributeGetterFunctionsHolder._attributeGetterFunctions.get(
				columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Entity4)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("Department_Id", _Department_Id);
		_columnOriginalValues.put("Department_Name", _Department_Name);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("Department_Id", 2L);

		columnBitmasks.put("Department_Name", 4L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Entity4 _escapedModel;

}